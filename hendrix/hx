#!/bin/bash
# This is where the magic happens! ... sort of.
# Meaning that this bash script allows us to run our daemonizing deploy.py
# script from any venv we may or may not happen to be in.

# defaults
usage () {
USAGE='\033[0m\n
DESCRIPTION:
\033[34m\n
\t"hx" is the terminal command used to deploy on a Hendrix web server.
 \033[0m\n
USAGE:\n
\tNote that this command daemonizes the process by default.\n
\te.g. hx start settings /path/to/wsgi.py\n
REQUIRED (positional args):\n
    \taction          \t\t\tstart|stop|restart\n
    \tsettings        \t\te.g. myproject.settings\n
    \twsgi            \t\t\te.g. /path/to/wsgi.py or ./wsgi.py\n
OPTIONS:\n
    \t-w              \t\t\t[number] of workers e.g. -w 2\n
    \t--port -p       \t\t[number] e.g. -p 8888\n
    \t--key          \t\t\tpath to ssl private key\n
    \t--cert          \t\t\tpath to pem certificate\n
    \t-v --verbose    \t\tprint output for debugging\n
    \t--debug         \t\tdebug mode
'
echo -e $USAGE
exit
}

PORT="8000"
PORTSSL="4430"
WORKERS="0"
VERBOSE=0
DEBUG=0
PRIVKEY=""
CERT=""
ACTION=""
SETTINGS=""
WSGI=""

ARGCOUNT=$#
if [[ "$ARGCOUNT" -le "1" ]]; then
    while [[ $# > 0 ]]; do
        flag=$1; shift
      case "${flag}" in
        --help|-h) usage ;;
        *) usage; echo "Unexpected option ${flag}"; exit 1 ;;
      esac
    done
elif [[ "$ARGCOUNT" -gt "2" ]]; then
    for i in `seq 1 3`; do
        case "${i}" in
            1) ACTION=$1 ;;
            2) SETTINGS=$1 ;;
            3) WSGI=$1 ;;
        esac
        shift
    done
    ARGCOUNT=$#
    NEXT_VAR="$1"
    NEXT_STRING_ELEMENT=${NEXT_VAR:0:1}
    if [[ "$NEXT_STRING_ELEMENT" = "-" ]]; then
        if [ "$ARGCOUNT" > "0" ]; then
            while [[ $# > 0 ]]; do
                flag=$1; shift
              case "${flag}" in
                --port|-p) PORT=$1; shift ;;
                --portssl|-ps) PORTSSL=$1; shift ;;
                --help|-h) usage ;;
                --key) PRIVKEY=$1; shift;;
                --cert) CERT=$1; shift;;
                -w) WORKERS=$1; shift ;;
                --verbose|-v) VERBOSE=1 ;;
                --debug) DEBUG=1 ;;
                *) usage; echo "Unexpected option ${flag}"; exit 1 ;;
              esac
            done
        fi
    elif [[ ! "$NEXT_STRING_ELEMENT" == "" ]]; then
        echo "ERROR: only options from here on out"
        usage
    fi
else
    echo "Arg Length Error: $@ is not enough args. 4 are needed e.g. Usage:"
    usage
    exit 1
fi

hendrix_deploy () {
    deploy=`type -P deploy.py`
    if [[ ! "$PRIVKEY" == "" ]] && [[ ! "$CERT" == "" ]]; then
        python $deploy $ACTION $SETTINGS $WSGI $PORT $PORTSSL $WORKERS $PRIVKEY $CERT
    else
        python $deploy $ACTION $SETTINGS $WSGI $PORT $PORTSSL $WORKERS
    fi
}


if [[ "$SETTINGS" == "" ]] || [[ "$ACTION" == "" ]] || [[ "$WSGI" == "" ]]; then
    usage
elif [[ "$DEBUG" = "1" ]]; then
    hendrix_deploy
elif [[ "$VERBOSE" = "1" ]]; then
    hendrix_deploy &
else
    hendrix_deploy &> /dev/null &
fi
exit 0
